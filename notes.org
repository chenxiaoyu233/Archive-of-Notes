#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+TITLE: Notes
#+AUTHOR: 陈小羽
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.2)

** DONE 2006 - Predicting interactions in protein networks by completing defective cliques
 :PROPERTIES:
 :Custom_ID: Yu_2006
  :AUTHOR: Yu, Paccanaro, Trifonov \& Gerstein
  :JOURNAL: Bioinformatics
  :YEAR: 2006
  :VOLUME: 22
  :PAGES: 823–829
  :DOI: 10.1093/bioinformatics/btl014
  :URL: http://dx.doi.org/10.1093/bioinformatics/btl014
 :END:
cite:Yu_2006
[[file:approximate-clique/Prediction-interactions-in-protein-networks.org][Details]]


** DONE 2005 - A polyhedral study of the generalized vertex packing problem
 :PROPERTIES:
  :Custom_ID: Sherali_2005
  :AUTHOR: Sherali \& Cole Smith
  :JOURNAL: Mathematical Programming
  :YEAR: 2005
  :VOLUME: 107
  :PAGES: 367–390
  :DOI: 10.1007/s10107-004-0504-0
  :URL: http://dx.doi.org/10.1007/s10107-004-0504-0
 :END:

cite:Sherali_2005
[[file:approximate-clique/A%20polyhedral%20study%20of%20the%20generalized%20vertex%20packing%20problem.org][Details]]


* Algebra
** Groups
	[[file:algebra/groups.org][groups.org]]

* Notes
** Elisp中的数据结构中, 存储的是引用, 和python十分相似
   #+BEGIN_SRC elisp
	(setq test-list '(a b c d e f))
	(setcar (nthcdr 1 test-list) 'cxy)
	test-list
   #+END_SRC

   #+RESULTS:
   | a | cxy | c | d | e | f |

 Entered on [2019-02-09 Sat 00:20]
** Searching Exercises (info "(eintr) search Exercises")
   第一题
	#+BEGIN_SRC elisp
	  (defun test-search (str)
		"searches for a string.
	  If the search finds the string, leave point after it and display a message
	  that says “Found!”."
		(interactive "sType the String: ")
		(goto-char (point-min))
		(when (search-forward str)
		  (message "Found!")))
	#+END_SRC
	第二题
	#+BEGIN_SRC elisp
	  (defun third-in-kill-ring () 
		"Write a function that prints the third element of the kill ring in
	  the echo area, if any; if the kill ring does not contain a third
	  element, print an appropriate message."
		(if (>= (length kill-ring) 3)
			(message "3rd element: %s" (car (nthcdr 2 kill-ring)))
		  (message "no enough elements")))
	  (third-in-kill-ring)
	#+END_SRC
 Entered on [2019-02-09 Sat 12:04]
** Looping Exercise (info "(eintr) Looping exercise")
   1) Write a function similar to ‘triangle’ in which each row has a
	  value which is the square of the row number.  Use a ‘while’ loop.
	  #+BEGIN_SRC elisp
		(defun add-rows (num)
		  (let ((sum 0))
			(while (> num 0)
			  (setq sum (+ sum (* num num)))
			  (setq num (1- num)))
			sum))
		(add-rows 3)
	  #+END_SRC

	  #+RESULTS:
	  : 14
   2) Write a function similar to ‘triangle’ that multiplies instead of
	  adds the values.
	  #+BEGIN_SRC elisp
		(defun mul-row (num)
		  (let ((sum 1))
			(while (> num 0)
			  (setq sum (* sum num))
			  (setq num (1- num)))
			sum))
		(mul-row 3)
	  #+END_SRC

	  #+RESULTS:
	  : 6
   3) Rewrite these two functions recursively.  Rewrite these functions
	  using ‘cond’.
	  - add-rows
		#+BEGIN_SRC elisp
		  (defun add-rows-recur (num)
			(cond ((<= num 0) 0)
				  ((> num 0) (+ (add-rows-recur (1- num)) (* num num)))))
		  (add-rows-recur 3)
		#+END_SRC

		#+RESULTS:
		: 14
	  - mum-rows
		#+BEGIN_SRC elisp 
		  (defun mul-rows-recur (num)
			(cond ((<= num 1) 1)
				  ((> num 1) (* (mul-rows-recur (1- num)) num))))
		  (mul-rows-recur 3)
		#+END_SRC

		#+RESULTS:
		: 6
   4) Write a function for Texinfo mode that creates an index entry at
	  the beginning of a paragraph for every ‘@dfn’ within the paragraph.
	  (In a Texinfo file, ‘@dfn’ marks a definition.  This book is
	  written in Texinfo.)
	  #+BEGIN_SRC elisp
		(defun cxy-gen-index ()
		  "make the index for @dfn in Texinfo mode."
		  (interactive)
		  (save-excursion
			(save-restriction
			  (mark-paragraph)
			  (narrow-to-region (point) (mark))
			  (let ((dfn-counter 0)
					dfn-begin
					dfn-end)
				(while (search-forward "@dfn{" nil t) ; get the dfn into the kill-ring
				  (setq dfn-begin (point))
				  (search-forward "}" nil t)
				  (setq dfn-end (1- (point)))
				  (copy-region-as-kill dfn-begin dfn-end)
				  (setq dfn-counter (1+ dfn-counter)))
				(goto-char (point-min))
				(while (> dfn-counter 0)
				  (setq dfn-counter (1- dfn-counter))
				  (insert (car (nthcdr dfn-counter kill-ring)))
				  (insert "\n"))))))
	  #+END_SRC
** Exercises with 're-search-forward' (info "(eintr) re-search Exercises")
   1) Write a function to search for a regular expression that matches
	  two or more blank lines in sequence.
	  #+BEGIN_SRC elisp
		(defun cxy-find-blank-lines ()
		  (interactive)
		  (re-search-forward "[
]\\{2,\\}"))
	  #+END_SRC
	  注意, 直接把re-search-forward当成command使用, 则直接输入一般的正则表达式即可.
	  但是, 如果需要在elisp中调用re-search-forward, 则需要对"\"进行转义, 因为在elisp字符串中"\"会有其他意思.
   2) Write a function to search for duplicated words, such as “the the”.
	  #+BEGIN_SRC elisp
		(defun cxy-duplicated-words ()
		  (interactive)
		  (re-search-forward "\\b\\(\\w\\{1,\\}\\)\\b[ \\t]*\\b\\1\\b"))
	  #+END_SRC


